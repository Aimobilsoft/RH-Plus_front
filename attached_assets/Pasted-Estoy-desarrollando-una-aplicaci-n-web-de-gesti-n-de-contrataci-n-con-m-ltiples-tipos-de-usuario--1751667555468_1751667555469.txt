Estoy desarrollando una aplicaci√≥n web de gesti√≥n de contrataci√≥n con m√∫ltiples tipos de usuario:

    admin

    analista

    cliente

    candidato

Quiero que la aplicaci√≥n tenga:
‚úÖ LOGIN √öNICO

    Solo una pantalla de login (/login) para todos los usuarios.

    Al iniciar sesi√≥n, se debe consultar el usuario autenticado y obtener:

        role: tipo de usuario

        permissions: lista de acciones permitidas (por ejemplo: "ver_maestros", "crear_solicitudes", "ver_dashboard", etc.)

üéØ VISUALIZACI√ìN BASADA EN ROLES Y ACCIONES

    La interfaz se adapta seg√∫n el rol, pero tambi√©n se debe mostrar cualquier m√≥dulo que haya sido concedido por permiso adicional, aunque no sea parte del rol base.

Ejemplo:

    El perfil candidato normalmente solo ve la secci√≥n "Informaci√≥n Personal".

    Pero si en su permissions se incluye "ver_maestros", tambi√©n debe mostrarse ese m√≥dulo.

    El sistema no debe limitarse al rol, sino responder a las acciones permitidas.

üõ† FUNCIONALIDAD ESPERADA

    Despu√©s del login, redirigir al dashboard correspondiente seg√∫n rol o acci√≥n principal.

    Usar un layout com√∫n que cargue din√°micamente los men√∫s y componentes seg√∫n permisos.

    Los men√∫s deben generarse autom√°ticamente a partir de la lista de permissions del usuario.

    Cada componente de ruta debe validar si el usuario tiene permiso antes de mostrarse.

    Se puede usar un permissions.ts o mapa global de acciones permitidas por m√≥dulo.

üìÅ ESTRUCTURA SUGERIDA

    AuthContext: mantiene sesi√≥n activa, user.role y user.permissions.

    ProtectedRoute: valida acceso por permisos antes de renderizar rutas.

    Sidebar: construye din√°micamente los men√∫s bas√°ndose en permissions.

    permissionsConfig.ts: archivo que mapea roles base y acciones opcionales a cada m√≥dulo.

üí° EJEMPLO DE L√ìGICA

const user = {
  role: "candidato",
  permissions: ["ver_informacion_personal", "ver_maestros"]
};

if (user.permissions.includes("ver_maestros")) {
  render(<MaestrosModule />);
}

El men√∫ y el contenido deben responder solo a las acciones permitidas, aunque el rol no las incluya por defecto.

‚ö†Ô∏è No quiero crear portales separados por tipo de usuario. Todo debe estar unificado en una sola aplicaci√≥n.